class Solution {
    public int longestSubstring(String s, int k) {
        if (s == null || s.length() == 0)
            return 0;
        int[] charToCountmap = new int[26];
        for (int i = 0; i < s.length(); i++)
            charToCountmap[s.charAt(i) - 'a']++;
        boolean isValid = true; 
        for (int i = 0; i < s.length(); i++)
        {
            int cur = s.charAt(i) - 'a';
            if (charToCountmap[cur] > 0 && charToCountmap[cur] < k)
            {
                isValid = false;
                break;
            }
        }
        if (isValid) return s.length(); 
        int startIndex = 0, maxLen = 0;
        for (int endIndex = 0; endIndex < s.length(); endIndex++)
        {
            if (charToCountmap[s.charAt(endIndex) - 'a'] < k)
            {
                maxLen = Math.max(maxLen, longestSubstring(s.substring(startIndex, endIndex), k));
                startIndex = endIndex + 1;   
            }
        }
        return Math.max(maxLen, longestSubstring(s.substring(startIndex), k));
    }
}