
// SOLUTION 1 / 2

class MyQueue {
private Stack <Integer> stack1=new Stack<>();
private Stack <Integer> stack2=new Stack<>();

    public MyQueue() {
        
    }
    
    public void push(int x) {
        
        while(! stack1.isEmpty())
        {
            stack2.add(stack1.pop());
        }
        stack1.add(x);
        while(!stack2.isEmpty())
        {
            stack1.add(stack2.pop());
        }
    }
    
    public int pop() {
        if(stack1.size()==0)
        {
            return -1;
        }
        return stack1.pop();
    }
    
    public int peek() {
        if(stack1.size()==0)
        {
            return -1;
        }
        return stack1.peek();
    }
    
    public boolean empty() {
        return stack1.size()==0;
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
 
 
 // SOLUTION 2 / 2
 
 
class MyQueue {
int [] arr; 
int i = 0;
int ptr = 0;
    public MyQueue() {
        arr = new int[1000];
    }
    
    public void push(int x) {
        arr[ptr] = x;
        ptr ++;
    }
    
    public int pop() {
        int ans = arr[i];
        i ++;
        return ans;
    }
    
    public int peek() {
        return arr[i];
    }
    
    public boolean empty() {
        return i == ptr;
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */